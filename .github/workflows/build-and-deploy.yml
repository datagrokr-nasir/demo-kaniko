name: Build and Deploy with Kaniko

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    outputs:
      s3_uri: ${{ steps.upload.outputs.S3_URI }}
      task_arn: ${{ steps.run-kaniko-task.outputs.TASK_ARN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        # Remove installation files to save space
        rm -rf awscliv2.zip aws/

    - name: Upload repository to S3
      id: upload
      run: |
        set -e
        # Variables
        LOCAL_DIR="${{ github.workspace }}"
        S3_BUCKET="${{ secrets.S3_BUCKET }}"
        S3_KEY="artifacts"
        touch context.tar.gz
        tar --exclude='context.tar.gz' --exclude='awscliv2.zip' --exclude='./aws' --exclude='./node_modules' --exclude='./venv' --exclude='./dist' --exclude='./build' --exclude='./tmp' -zcvf context.tar.gz .
        # Upload to S3
        aws s3 cp context.tar.gz s3://$S3_BUCKET/$S3_KEY/context.tar.gz --region ${{ secrets.AWS_REGION }}
        # Get the S3 URI
        S3_URI="s3://$S3_BUCKET/$S3_KEY"
        # Output the S3 URI for the next step
        echo "S3_URI=$S3_URI" >> $GITHUB_OUTPUT

    - name: Run ECS task with overrides
      id: run-kaniko-task
      run: |
        set -e
        # Load the S3 URI
        S3_URI=${{ steps.upload.outputs.S3_URI }}
        # Variables
        CLUSTER_NAME="${{ secrets.CLUSTER_NAME }}"
        SUBNETS="${{ secrets.SUBNETS }}"  # Comma-separated list of subnet IDs
        SECURITY_GROUPS="${{ secrets.SECURITY_GROUPS }}"  # Comma-separated list of security group IDs
        TASK_FAMILY="kaniko-demo"
        TASK_DEFINITION="${{ secrets.TASK_DEFINITION }}"  # The ARN or family name of the task definition to use
        KANIKO_DEMO_IMAGE="${{ secrets.KANIKO_DEMO_IMAGE }}"
        AWS_REGION="${{ secrets.AWS_REGION }}"
        # Run the ECS task with command override
        TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --task-definition $TASK_DEFINITION \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=ENABLED}" \
            --region $AWS_REGION \
            --overrides '{
                "containerOverrides": [
                    {
                        "name": "kaniko",
                        "command": [
                            "--context", "'"$S3_URI/context.tar.gz"'",
                            "--dockerfile", "Dockerfile",
                            "--destination", "'"$KANIKO_DEMO_IMAGE"'",
                            "--force"
                        ]
                    }
                ]
            }' \
            --query 'tasks[0].taskArn' \
            --output text)
        # Output the TASK_ARN for the next step
        echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT

    - name: Monitor ECS task
      id: monitor-task
      run: |
        set -e
        # Load the TASK_ARN from the previous step
        TASK_ARN=${{ steps.run-kaniko-task.outputs.TASK_ARN }}
        CLUSTER_NAME="${{ secrets.CLUSTER_NAME }}"
        AWS_REGION="${{ secrets.AWS_REGION }}"
        # Function to get the task status
        get_task_status() {
          aws ecs describe-tasks \
            --cluster $CLUSTER_NAME \
            --tasks $TASK_ARN \
            --region $AWS_REGION \
            --query 'tasks[0].lastStatus' \
            --output text
        }
        # Loop until the task stops
        STATUS=$(get_task_status)
        while [[ "$STATUS" != "STOPPED" ]]; do
          echo "Task is still running. Current status: $STATUS"
          sleep 15
          STATUS=$(get_task_status)
        done
        # Get the task details
        TASK_DETAILS=$(aws ecs describe-tasks \
          --cluster $CLUSTER_NAME \
          --tasks $TASK_ARN \
          --region $AWS_REGION \
          --query 'tasks[0].containers[0]' \
          --output json)
        # Extract exit code and reason
        EXIT_CODE=$(echo $TASK_DETAILS | jq -r '.exitCode')
        REASON=$(echo $TASK_DETAILS | jq -r '.reason')
        # Output the EXIT_CODE and REASON for the next step
        echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_OUTPUT
        echo "REASON=$REASON" >> $GITHUB_OUTPUT
        # Check the exit code and reason
        if [ "$EXIT_CODE" -eq "0" ]; then
          echo "Kaniko task completed successfully."
        else
          echo "Kaniko task failed with exit code $EXIT_CODE."
          echo "Failure reason: $REASON"
          exit $EXIT_CODE
        fi